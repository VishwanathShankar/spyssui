# Test 
name: Basic CI / CD to build spring boot application and deploy to kubernetes cluster 
on:
  push:
    branches: [ dev]
  pull_request:
    branches: [ dev]
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: my-first-cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: spyss-frontend-deployment # TODO: update to deployment name
  IMAGE: spidercal-frontend    

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Change the directory
      run: cd backend        
      
    - name: Build with Maven
      run: mvn -B package --no-transfer-progress --file backend/pom.xml
      
      # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
    # Build the Docker image
    - name: Build the Docker Image
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:latest" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Container Registry
    - name: Publish the Docker Image to GCR
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:latest"
        
    - name: Create Namespace spidercal-frontend
      run: |-
        kubectl apply -f spidercal-namespace.yml
        
    - name: Deploy image to kubernetes cluster
      run: |-
        kubectl apply -f deployment.yml 
        
    - name: Expose Deployment to internet
      run: |-
        kubectl apply -f service.yml 
